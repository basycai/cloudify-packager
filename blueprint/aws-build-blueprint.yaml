tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3.1/plugin.yaml
  - types/build-types.yaml

inputs:

  aws_access_key_id:
    type: string
    default: ''

  aws_secret_access_key:
    type: string
    default: ''

  ec2_region_name:
    type: string
    default: 'us-east-1'

  use_existing_manager_keypair:
    type: boolean
    default: false

  manager_keypair_name:
    type: string
    default: cloudify-manager-kp

  ssh_key_filename:
    type: string
    default: '~/.ssh/cloudify-manager-kp.pem'

  agent_private_key_path:
    type: string
    default: '~/.ssh/cloudify-agent-kp.pem'

  use_existing_manager_group:
    type: boolean
    default: false

  use_existing_agent_group:
    type: boolean
    default: false

  manager_security_group_name:
    type: string
    default: 'cloudify-manager-security-group'

  agent_security_group_name:
    type: string
    default: 'cloudify-agent-security-group'

  manager_server_name:
    type: string
    default: 'cloudify-manager-server'

  ssh_user:
    type: string
    default: centos

  image_id:
    type: string
    default: ami-61bbf104

  instance_type:
    type: string
    default: m3.medium

dsl_definitions:
  aws_configuration: &aws_configuration
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }


node_templates:

  management_keypair:
    type: cloudify.aws.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_manager_keypair }
      resource_id: { get_input: manager_keypair_name }
      private_key_path: { get_input: ssh_key_filename }
      aws_config: *aws_configuration

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: { get_input: agent_security_group_name }
      use_external_resource: { get_input: use_existing_agent_group }
      description: Security group for Cloudify agent VMs
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
      aws_config: *aws_configuration

  server_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_configuration

  build_host:
    type: cloudify.aws.nodes.Instance
    properties:
      resource_id: { get_input: manager_server_name }
      image_id: { get_input: image_id }
      instance_type: { get_input: instance_type }
      install_agent: false
      aws_config: *aws_configuration
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: server_ip
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: management_keypair
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: security_group

  plugin:
    type: build.nodes.Plugin
    relationships:
      - type: cloudify.relationships.contained_in
        target: build_host

plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_attribute: [ server_ip, aws_resource_id ] }

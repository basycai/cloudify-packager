imports:
  - http://www.getcloudify.org/spec/aws-plugin/1.4/plugin.yaml

inputs:
  aws_access_key_id:
    type: string
    default: ''

  aws_secret_access_key:
    type: string
    default: ''

  ec2_region_name:
    type: string
    default: 'us-east-1'

  use_existing_keypair:
    type: boolean
    default: true

  keypair_name:
    type: string
    default: vagrant_build

  ssh_user:
    type: string
    default: centos

  ssh_key_filename:
    type: string
    default: "~/.ssh/aws/vagrant_build.pem"

  use_existing_security_group:
    type: boolean
    default: true

  security_group_name:
    type: string
    default: vagrant_linux_build

  build_server_name:
    type: string
    # maybe concat here to provide an explicit build name
    default: build_server

  image_id:
    type: string
    default: ami-61bbf104

  instance_type:
    type: string
    default: m3.medium

dsl_definitions:
  aws_configuration: &aws_configuration
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }


node_templates:
  keypair:
    type: cloudify.aws.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: ssh_key_filename }
      aws_config: *aws_configuration

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: { get_input: security_group_name }
      use_external_resource: { get_input: use_existing_security_group }
      description: Security group for vagrant_linux_build
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
      aws_config: *aws_configuration

  server_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_configuration

  build_host:
    type: cloudify.aws.nodes.Instance
    properties:
      resource_id: { get_input: build_server_name }
      image_id: { get_input: image_id }
      instance_type: { get_input: instance_type }
      install_agent: false
      aws_config: *aws_configuration
      host_ip: { get_attribute: [server_ip, aws_resource_id]}
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: server_ip
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: keypair
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: security_group

outputs:
  build_host_ip:
    value: { get_attribute: [server_ip, aws_resource_id] }